#!/usr/bin/env bash

# ==============================================
# ~/.macos
# macOS Sequoia (15.x)
# Compatibility-updated version for modern macOS
# ==============================================
# System Settings (formerly System Preferences)
#    1. Set hostname
#    2. Date & Time
#    3. Set energy preferences
#    4. Application Layer Firewall
#    5. Login window
#    6. FileVault
# User Preferences
# ==============================================

# Check hostname argument
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 enter_hostname >" >&2
  exit 1
fi

# Close any open System Settings panes
osascript -e 'tell application "System Settings" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# IS_LAPTOP=`sudo /usr/sbin/system_profiler SPHardwareDataType | grep -i "Model Name" | grep -i "Book"`

# ==============================================
# Start: System Settings
# ==============================================

# ==============================================
# System Settings: Set hostname
# ==============================================

sudo scutil --set ComputerName $1
sudo scutil --set HostName $1
sudo scutil --set LocalHostName $1
# sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string $1

# ==============================================
# System Settings: Date & Time
# ==============================================

sudo /usr/sbin/systemsetup -settimezone "Africa/Johannesburg"
sudo /usr/sbin/systemsetup -setnetworktimeserver "time.apple.com"
sudo /usr/sbin/systemsetup -setusingnetworktime off
# sudo defaults write /Library/Preferences/com.apple.timezone.auto Active -bool false

# # ==============================================
# # System Settings: Set energy preferences
# # ==============================================

# if [[ "$IS_LAPTOP" != "" ]]; then
#     sudo pmset -b sleep 15 disksleep 10 displaysleep 5 halfdim 1
#     sudo pmset -c sleep 0 disksleep 0 displaysleep 30 halfdim 1
# else
#     sudo pmset sleep 0 disksleep 0 displaysleep 30 halfdim 1
# fi

# ==============================================
# System Settings: Application Layer Firewall
# ==============================================

# Enable ALF
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on

# Allow downloaded signed apps
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setallowsignedapp on

# Allow signed apps
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setallowsigned on

# Enable logging
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setloggingmode on

# Disable stealth mode
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on

# ==============================================
# System Settings: Login window
# ==============================================

# Show shut down etc. buttons
sudo defaults write /Library/Preferences/com.apple.loginwindow PowerOffDisabled -bool false

# Don't show any password hints
sudo defaults write /Library/Preferences/com.apple.loginwindow RetriesUntilHint -int 0

# Hide users with UID under 500
sudo defaults write /Library/Preferences/com.apple.loginwindow Hide500Users -bool YES

# ==============================================
# System Settings: FileVault
# ==============================================

# Destroy File Vault Key when going to standby mode
# User will be prompted for password when coming out of standby mode
# # sudo pmset -a destroyfvkeyonstandby 1

# ==============================================
# End: System Settings
# ==============================================

# ==============================================
# Start: User Preferences
# ==============================================
# ==============================================
# User Preferences: General
# ==============================================
echo "User Preferences: General panel"

# Sidebar icon size: Small
defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 1
# Possible values: 1 = Small, 2 = Medium, 3 = Large

# Always show scrollbars
defaults write NSGlobalDomain AppleShowScrollBars -string "WhenScrolling"
# Possible values: 'WhenScrolling', 'Automatic', 'Always'

# Don't restore windows when quitting or re-opening apps
defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool false

# ==============================================
# User Preferences: Desktop & Screen Saver
# ==============================================
echo "User Preferences: Desktop & Screen Saver"

# Hot corners:  bottom left = start screen saver
defaults write com.apple.dock "wvous-bl-corner" -int 5
defaults write com.apple.dock "wvous-bl-modifier" -int 0

# ==============================================
# User Preferences: Dock
# ==============================================
echo "User Preferences: Dock"

# Set size of dock
defaults write com.apple.dock tilesize -int 32

# Enable magnification
defaults write com.apple.dock magnification -bool true

# Set magnification in dock
defaults write com.apple.dock largesize -int 64

# Set orientation of dock
defaults write com.apple.dock orientation -string bottom

# Show hidden applications
defaults write com.apple.dock showhidden -bool true

# Change minimize effect
## defaults write com.apple.dock mineffect suck
# Possible values: 'genie', 'scale', 'suck'

# Animate application launch
defaults write com.apple.dock launchanim -bool true

# Show indicators for open applications
defaults write com.apple.dock show-process-indicators -bool true

# Don't show recent applications in Dock
defaults write com.apple.dock show-recents -bool false

# ==============================================
# User Preferences: Mission Control
# ==============================================
echo "User Preferences: Mission Control"

# Disbale rearranging Spaces based on recent use
defaults write com.apple.dock mru-spaces -bool false

# ==============================================
# User Preferences: Language & Region
# ==============================================
echo "User Preferences: Language & Region"

# Set locale
defaults write NSGlobalDomain AppleLocale -string "en_ZA"
## defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
## defaults write NSGlobalDomain AppleMetricUnits -bool true

# ==============================================
# User Preferences: Privacy & Security
# ==============================================
echo "User Preferences: Privacy & Security"

# Ask for password after 5 seconds
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 5

# ==============================================
# User Preferences: Keyboard
# ==============================================
echo "User Preferences: Keyboard"

# Disable automatic capitalization
defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

# Disable smart dashes
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

# Disable automatic period substitution
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# ==============================================
# User Preferences: Trackpad
# ==============================================
echo "User Preferences: Trackpad preferences"

# Set trackpad tracking speed
defaults write -g com.apple.trackpad.scaling 3

# Enable "natural" scroll direction
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool true

# Tap to click
defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true

# Tap with two fingers to emulate right click
defaults write com.apple.AppleMultitouchTrackpad TrackpadRightClick -bool true

# Enable three finger tap (look up)
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerTapGesture -int 0

# Disable three finger drag
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool false

# Zoom in or out
defaults write com.apple.AppleMultitouchTrackpad TrackpadPinch -bool true

# Smart zoom, double-tap with two fingers
defaults write com.apple.AppleMultitouchTrackpad TrackpadTwoFingerDoubleTapGesture -bool true

# Rotate
defaults write com.apple.AppleMultitouchTrackpad TrackpadRotate -bool true

# Notification Center
defaults write com.apple.AppleMultitouchTrackpad TrackpadTwoFingerFromRightEdgeSwipeGesture -int 3

# Swipe between pages with two fingers
# defaults write NSGlobalDomain AppleEnableSwipeNavigateWithScrolls -bool true

# Swipe between full-screen apps
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerHorizSwipeGesture -int 2

# Enable other multi-finger gestures
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerVertSwipeGesture -int 2
defaults write com.apple.AppleMultitouchTrackpad TrackpadFourFingerVertSwipeGesture -int 2
defaults write com.apple.AppleMultitouchTrackpad TrackpadFourFingerPinchGesture -int 2
defaults write com.apple.AppleMultitouchTrackpad TrackpadFourFingerHorizSwipeGesture -int 2
defaults write com.apple.AppleMultitouchTrackpad TrackpadFiveFingerPinchGesture -int 2

# defaults write com.apple.dock showMissionControlGestureEnabled -bool true
# defaults write com.apple.dock showAppExposeGestureEnabled -bool false
# defaults write com.apple.dock showDesktopGestureEnabled -bool true
# defaults write com.apple.dock showLaunchpadGestureEnabled -bool true

# defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad USBMouseStopsTrackpad -bool true

# ==============================================
# User Preferences: NSGlobalDomain settings
# ==============================================
echo "User Preferences: NSGlobalDomain preferences"

# Save to disk (not to iCloud) by default
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Automatically quit printer app once the print jobs complete
## defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

# Displaying ASCII control characters using caret notation in standard text views
## defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

# ==============================================
# User Preferences: Menu Bar
# ==============================================
echo "User Preferences: Menu Bar preferences"

# Menu Bar Date Format
defaults write com.apple.menuextra.clock "DateFormat" "EEE d MMM  HH:mm:ss"

# ==============================================
# User Preferences: App: Finder
# ==============================================
echo "User Preferences: Finder preferences"

# Show the ~/Library directory
## chflags nohidden "${HOME}/Library"

# Don't show the ~/mac-setup directory
## chflags hidden "${HOME}/mac-setup"

# Expand the "General", "Open with", and "Sharing & Permissions" panes
## defaults write com.apple.finder FXInfoPanesExpanded -dict \
##   General -bool true \
##   OpenWith -bool true \
##   Privileges -bool true

# Show status bar
defaults write com.apple.finder ShowStatusBar -bool true

# Show path bar
defaults write com.apple.finder ShowPathbar -bool true

# Show tab bar
defaults write com.apple.finder ShowTabView -bool true

# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# New window points to home
defaults write com.apple.finder NewWindowTarget -string "PfHm"
## defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

# Automatically open a new Finder window when a volume is mounted
## defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
## defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
## defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

# Finder: disable window animations and Get Info animations
## defaults write com.apple.finder DisableAllAnimations -bool true

# Show icons for hard drives, servers, and removable media on the desktop
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false

# Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Finder: allow text selection in Quick Look
defaults write com.apple.finder QLEnableTextSelection -bool true

# When performing a search, search the current folder by default
# defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Avoid creating .DS_Store files on network volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Use column view
defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

# ==============================================
# User Preferences: App: App Store
# ==============================================
# echo "User Preferences: App Store preferences"

# Check for software updates daily, not just once per week
## defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# Enable auto updates
## sudo softwareupdate --schedule on

# ==============================================
# User Preferences: Screen Capture
# ==============================================
echo "User Preferences: Screenshots preferences"

# Save screenshots to the custom directory
mkdir -p "${HOME}/Documents/screenshots"
defaults write com.apple.screencapture location -string "${HOME}/Documents/screenshots"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "png"

# Disable shadow in screenshots
defaults write com.apple.screencapture disable-shadow -bool true

# Include date in screenshot filename
defaults write com.apple.screencapture include-date -bool true

# ==============================================
# User Preferences: App: TextEdit
# ==============================================
echo "User Preferences: TextEdit preferences"

# Use plain text mode for new documents
defaults write com.apple.TextEdit RichText -int 0

# Open and save files as UTF-8
defaults write com.apple.TextEdit PlainTextEncoding -int 4
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

# ==============================================
# User Preferences: App: Activity Monitor
# ==============================================
echo "User Preferences: Activity Monitor preferences"

# Show the main window when launching
defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

# Show all processes
defaults write com.apple.ActivityMonitor ShowCategory -int 0

# ==============================================
# User Preferences: App: Safari
# ==============================================
echo "User Preferences: Safari preferences"

# Enable Develop menu
defaults write com.apple.Safari IncludeDevelopMenu -bool true

# Show full URL in address bar
defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true

# Disable auto-filling passwords
defaults write com.apple.Safari AutoFillPasswords -bool false

# ==============================================
# Kill affected applications
# ==============================================

function killallApps() {
    killall "Finder" > /dev/null 2>&1
    killall "SystemUIServer" > /dev/null 2>&1
    killall "Dock" > /dev/null 2>&1

    appsToKill=(
    "Dashboard"
    "System Settings"
    )

    for app in "${appsToKill[@]}"
    do
        killall "${app}" > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            # We just killed an app so restart it
            open -a "${app}"
        fi
    done

    echo "Note that some of these changes require a logout/restart to take effect."
}

printf "Restart the affected applications? (y/n): "
read killallReply
if [[ $killallReply =~ ^[Yy]$ ]]; then
    killallApps
fi

exit 0

# ==============================================
# End: User Preferences
# ==============================================
